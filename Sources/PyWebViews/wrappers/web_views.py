from swift_tools.swift_types import * # type: ignore
from typing import Sequence, Mapping

"import UIViewRender"

UIViewPixels = NewType("UIViewPixels", object)

@wrapper()
class WebViewer:

    def __init__(self): ...

    def reload(self): ... 

    def reloadFromOrigin(self): ... 

    def forward(self): ...
    #can_go_forward = property(bool, setter=False)
    can_go_forward = WrappedProperty(bool, readonly=True)
    
    def back(self): ...
    
    can_go_back = WrappedProperty(bool, readonly=True)

    def load_data(self,data: data, mime: str, char_encoing: str, base_url: str): ...
    
    #def load_data2(self,data0: bytes, mime: str, char_encoing: str, base_url: str): ...

    def load_url(self, url: str): ...

    #def load_html_string(self, string: str, base_url: str | None): ...

    #def set_frame(self, x: float, y: float, w: float, h: float): ...
    def set_pos(self, x: float, y: float): ...
    def set_size(self, w: float, h: float): ...

    def show(self): ...

    def present(self): ...

    def dismiss(self): ...
    
    def requestFrame(self): ...
    
    def startTextureRender(self, fps: int): ...
    
    def stopTextureRender(self): ...
    
    def set_callback(self, callback: object): ...
    
    class Callbacks:
        def next_frame(self, frame: UIViewPixels, size: list[float]): ...

@wrapper()
class JavaViewer:
    
    def __init__(self): ...

    def load_html(self, html: str): ...

    def evaluate_javascript(self, js: str): ...

    #def set_frame(self, x: float, y: float, w: float, h: float): ...
    def set_pos(self, x: float, y: float): ...
    def set_size(self, w: float, h: float): ...

    def show(self): ...

    def present(self): ...

    def dismiss(self): ...
    
    def requestFrame(self): ...
    
    def startTextureRender(self, fps: int): ...
    
    def stopTextureRender(self): ...
    
    def set_callback(self, callback: object): ...
    
    class Callbacks:
        def next_frame(self, frame: UIViewPixels, size: list[float]): ...
    
